# coding=utf-8                                                                                                                   
'''
Metadata driver for SENTINEL SAR

The top-level SENTINEL-1 product folder name is composed of upper-case alphanumeric characters separated by an underscore (_).

The Mission Identifier (MMM) denotes the satellite and will be either S1A for the SENTINEL-1A instrument or S1B for the SENTINEL-1B instrument.

The Mode/Beam (BB) identifies the S1-S6 beams for SM products and IW, EW and WV for products from the respective modes.

Product Type (TTT) can be RAW, SLC, GRD or OCN.

Resolution Class (R) can be F (Full resolution), H (High resolution), M (Medium resolution) or _ (underscore: not applicable to the current product type). Resolution Class is used for SLC and OCN only.

The Processing Level (L) can be 0, 1 or 2.

The Product Class can be Standard (S) or Annotation (A). Annotation products are only used internally by the PDGS and are not distributed.

Polarisation (PP) can be:

    SH (single HH polarisation)
    SV (single VV polarisation)
    DH (dual HH+HV polarisation)
    DV (dual VV+VH polarisation).
    The product start and stop date and times are shown as fourteen digits representing the date and time, separated by the character 'T'.capitalize
    The absolute orbit number at product start time (OOOOOO) will be in the range 000001-999999.

    The mission data-take identifier (DDDDDD) will be in the range 000001-FFFFFF. The product unique identifier (CCCC) is a hexadecimal string generated by computing CRC-16 on the manifest file using CRC-CCITT.

    The folder extension is always "SAFE".capitalize
    Within a product folder, measurement data sets and annotation data sets follow a similar naming convention with lower case alphanumeric characters separated by a dash (-).


Dataset Naming Convention

The Mission Identifier (mmm) denotes the satellite and will be either s1a for the SENTINEL-1A instrument or s1b for the SENTINEL-1B instrument.

The Swath Identifier (sss) identifies the s1-s6 beams for SM mode, iw1-iw3 for IW mode, ew1-ew5 for EW more and wv1-wv2 for WV mode.

Product Type (ttt) can be slc, grd or ocn.

Polarisation (pp) can be:

    hh (single HH polarisation)
    vv (single VV polarisation)
    hv (single HV polarisation)
    vh (single VH polarisation).
    The product start and stop date and times are shown by fourteen digits representing the date and time separated by the character 't'.capitalize
    The absolute orbit number at product start time (oooooo) will be in the range 000001-999999.

    The mission data-take identifier (dddddd) will be in the range 000001-FFFFFF.

    The image number (nnn) identifies each individual image. WV vignettes each have their own image number as do each swath and polarisation image for SM, IW and EW.  
    The file extension denotes the data format of the file and could be tiff, nc, xml, html, kml, xsd or png.

    SENTINEL-SAFE File Format

    SENTINEL data products are distributed using a SENTINEL-specific variation of the Standard Archive Format for Europe (SAFE) specification. The SAFE format has been designed to act as a common format for archiving and conveying data within ESA Earth Observation archiving facilities. SAFE was recommended for the harmonization of the GMES missions by the GMES Product Harmonisation Study.

    The SENTINEL-SAFE format wraps a folder containing image data in a binary data format and product metadata in XML. This flexibility allows the format to be scalable enough to represent all levels of SENTINEL products.

    A SENTINEL product refers to a directory folder that contains a collection of information. It includes:

        a manifest.safe file which holds the general product information in XML
        subfolders for measurement data sets containing image data in various binary formats
        a preview folder containing quicklooks in PNG format, Google Earth overlays in KML format and HTML preview files
        an annotation folder containing the product metadata in XML as well as calibration data
        a support folder containing the XML schemes describing the product XML.
        The data delivered is packaged as a file structure containing a manifest file in XML format listing general product metadata and subfolders for measurement data, annotations, previews and support files.

The manifest file is an XML file containing the mandatory product metadata common to all SENTINEL-1 products.

Annotated data sets contain metadata describing the properties and characteristics of the measurement data or how they were generated. For each band of data there is a product annotation data set that contains metadata describing the main characteristics corresponding to that band such as the state of the platform during acquisition, image properties, polarisation, Doppler information, swath merging and geographic location. Calibration annotations contain calibration information and the beta nought, sigma nought, gamma and digital number look-up tables that can be used for absolute product calibration. Noise data annotations contain the estimated thermal noise look-up tables. Annotated data sets are provided in XML format.mro
In the preview folder, quicklook data sets are power detected, averaged and decimated to produce a lower resolution version of the image. Single polarisation products are represented with a grey scale image. Dual polarisation products are represented by a single composite color image in RGB with the red channel (R) representing the first polarisation, the green channel (G) represents the second polarisation and the blue channel (B) represents an average of the absolute values of the two polarisations.

Representation data sets found in the support folder contain information about the format or syntax of the measurement and annotated data sets and can be used to validate and exploit these data. Representation data sets are provided as XML schemas.

Measurement data sets contain the binary information of the actual acquired or processed data. For Level-0 this is the instrument data, for Level-1 it is processed data. There is one measurement data set per polarisation and per swath. TOPSAR SLC products contain one complex measurement data set in GeoTIFF format per swath per polarisation. Level-1 GRD products contain one detected measurement data set in GeoTIFF format per polarisation.

Measurement data sets are provided in GeoTIFF format for Level-1 products.

For further details on the SENTINEL-1 Level-1 product formatting, please refer to the SENTINEL-1 Level-1 and Level-2 Product Specification document found in the document library.



https://earth.esa.int/web/sentinel/technical-guides/sentinel-1-sar/products-algorithms/level-1-product-formatting
https://earth.esa.int/web/sentinel/user-guides/document-library
'''

#import base dataset modules
import __default__

# import other modules (use "_"  prefix to import privately)
import sys, os, re, glob, time, math, string
import datetime
from metageta import utilities, geometry, spatialreferences, xmltodict

try:
    from osgeo import gdal
    from osgeo import gdalconst
    from osgeo import osr
    from osgeo import ogr
except ImportError:
    import gdal
    import gdalconst
    import osr
    import ogr

gdal.AllRegister()

format_regex=[
        #padrão SENTINEL SAFE 
        r'[abs1]+-[eiswv1-6]+-[cdglrs]{3}-[hv]{2}-(\d+t\d{6}-){2}[\w-]*\.(tiff)$'
]

class Dataset(__default__.Dataset):
    def __init__(self, f):
        if not f:f=self.fileinfo['filepath']
        if f[:4]=='/vsi':raise NotImplementedError

        fl = []
        #complementando a lista de arquivos do formato SAFE
        #diretório principal do fileset
        maindir = os.path.dirname(f).replace('/measurement','')

        manifest_file = 'manifest.safe'
        annotation_file = self.fileinfo['filename'].replace('.tiff','.xml')
        quicklook_file = 'quick-look.png'

        manifest_file_path = "%s/%s" % (maindir, manifest_file)
        annotation_file_path = "%s/%s/%s" % (maindir, "annotation",annotation_file)
        quicklook_file_path = "%s/%s/%s" % (maindir,"preview",quicklook_file)
        
        if not os.path.exists(f):
            raise IOError('GeoTIFF file %s not found' % f)
        else:
            fl.append(f)
        if not os.path.exists(manifest_file_path):
            raise IOError('Manifest file %s not found' % manifest_file_path)
        else:
            fl.append(manifest_file_path)
        if not os.path.exists(annotation_file_path):
            raise IOError('Annotation file %s not found' % annotation_file_path)
        else:
            fl.append(annotation_file_path)
        if not os.path.exists(quicklook_file_path):
            raise IOError('Quick-Look file %s not found' % quicklook_file_path)
        else:
            fl.append(quicklook_file_path)

        self.filelist = fl

    def __getmetadata__(self, f=None):

        if not f:f=self.fileinfo['filepath']
        if f[:4]=='/vsi':raise NotImplementedError

        if not self._gdaldataset:self._gdaldataset= geometry.OpenDataset(f)
        driver=self._gdaldataset.GetDriver().ShortName

        metadataset = utilities.parse_xml(self.filelist[2])

        self.metadata['filetype'] = driver+'/'+self._gdaldataset.GetDriver().LongName
        self.metadata['sensor'] = 'SAR'
        self.metadata['satellite'] = 'SENTINEL-1A' if metadataset['product']['adsHeader']['missionId'] == 'S1A' else None
        self.metadata['mode'] = metadataset['product']['adsHeader']['mode']
        self.metadata['cols'] = self._gdaldataset.RasterXSize
        self.metadata['rows'] = self._gdaldataset.RasterYSize
        self.metadata['nbands'] = self._gdaldataset.RasterCount

        self.metadata['srs'] = self._gdaldataset.GetGCPProjection()
        self.metadata['nbits'] = gdal.GetDataTypeSize(self._gdaldataset.GetRasterBand(1).DataType)
        imgdate = metadataset['product']['adsHeader']['startTime']
        self.metadata['imgdate'] = datetime.datetime.strptime(re.sub('\.\d{6}','',imgdate),"%Y-%m-%dT%H:%M:%S")
        #segundo a documentação do SENTINEL-1 o pixel spacing é dado em metros
        self.metadata['cellx'] = metadataset['product']['imageAnnotation']['imageInformation']['rangePixelSpacing']
        self.metadata['celly'] = metadataset['product']['imageAnnotation']['imageInformation']['azimuthPixelSpacing']
        unidade_celula = 'metric'

        srs = osr.SpatialReference()
        srs.ImportFromWkt(self.metadata['srs'])
        
        datum = srs.GetAttrValue('DATUM')
        srid = spatialreferences.IdentifyAusEPSG(self.metadata['srs'])

        #WGS84
        if srid == 4326:
            geotransform = self._gdaldataset.GetGeoTransform()
            if geotransform == (0, 1, 0, 0, 0, 1): 
                if self._gdaldataset.GetGCPCount() > 0:
                    gcps=self._gdaldataset.GetGCPs()
                    geotransform=gdal.GCPsToGeoTransform(gcps)
                    gcps=geometry.GeoTransformToGCPs(geotransform,self.metadata['cols'],self.metadata['rows']) #Just get the 4 corner GCP's
                else:
                    raise NotImplementedError, 'Dataset is not georeferenced'
            else:
                gcps=geometry.GeoTransformToGCPs(geotransform,self.metadata['cols'],self.metadata['rows'])

            ext=[[gcp.GCPX, gcp.GCPY] for gcp in gcps]
            ext.append([gcps[0].GCPX, gcps[0].GCPY])#Add the 1st point to close the polygon)

        else:
            #Reproject to WGS84 corners to lon,lat
            geom = geometry.GeomFromExtent(ext)
            src_srs=osr.SpatialReference()
            src_srs.ImportFromWkt(self.metadata['srs'])
            tgt_srs=osr.SpatialReference()
            tgt_srs.ImportFromEPSG(4326)
            geom=geometry.ReprojectGeom(geom,src_srs,tgt_srs)
            points=geom.GetGeometryRef(0) #geom.GetBoundary()
            ext=[[points.GetX(i),points.GetY(i)] for i in range(0,points.GetPointCount())]

        self.extent = ext

        tipo_produto = metadataset['product']['adsHeader']['productType']
        polarizacao = metadataset['product']['adsHeader']['polarisation']
        direcao_orbita = metadataset['product']['generalAnnotation']['productInformation']['pass']
        caminho_metadados = self.filelist[1]
        projecao = metadataset['product']['generalAnnotation']['productInformation']['projection']

        self.metadata['metadata'] = {'polarizacao':polarizacao, 'datum':datum, 'projecao':projecao,'lado_imageamento':None, 'tipo_produto':tipo_produto, 'direcao_orbita':direcao_orbita,'caminho_metadados':caminho_metadados, 'srid':srid, 'angulo_near':None, 'angulo_far':None,'unidade_celula_xy':unidade_celula}

 


